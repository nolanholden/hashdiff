#include <cstddef>
#include <iostream>
#include <vector>

using byte_t = std::uint8_t;

int main() {
  std::vector<byte_t>
    file_hash          = { 0xca, 0x49, 0x74, 0xb7, 0xe8, 0x53, 0x8a, 0xba, 0x91, 0x03, 0xbe, 0xde, 0xf8, 0x9f, 0x44, 0x26, 0xbc, 0x95, 0xf4, 0xc5, 0xa4, 0xf3, 0x6d, 0x2a, 0xc2, 0x75, 0x42, 0x90, 0xfa, 0x74, 0x5b, 0x79, },
    modified_file_hash = { 0xaa, 0x54, 0xec, 0x82, 0xfa, 0x33, 0xf0, 0x48, 0xe2, 0xb7, 0x28, 0xea, 0xa2, 0xea, 0xaa, 0xda, 0xe3, 0xee, 0x6c, 0x48, 0xa7, 0x30, 0x76, 0x6a, 0xb8, 0xe7, 0xff, 0xb4, 0x59, 0xce, 0x87, 0x0e, };
  auto num_disparate_bytes = std::uintmax_t{ 0 };
  
  auto itr1 = file_hash.cbegin(),
       end1 = file_hash.cend(),
       itr2 = modified_file_hash.cbegin(),
       end2 = modified_file_hash.cend();
  for (; itr1 != end1 && itr2 != end2; )
    if (*itr1++ != *itr2++) ++num_disparate_bytes;

  if (itr1 != end1 || itr2 != end2) return 1; // just fail; we're not interested
                                              // in this case.
  std::cout << "total bytes disparate: " << num_disparate_bytes << std::endl;
  return 0;
}
